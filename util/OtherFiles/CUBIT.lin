#
# This file contains make macro definitions needed for a cubit developers
# installation.  This file is included directly into the CUBIT makefile,
# so definitions are in make macro format
#
CUBITROOT = $(ES_HOME)/cubit
#
# SOURCE_DIR:
# Developer's primary cubit source directory (i.e. the directory from which
# cvs operations are done)
#
SOURCE_DIR = .

# egcs root directory.  Since the egcs version keeps changing on us, we'll
# put it here so that we don't have to keep changing parts in the file
EGCS_ROOT = /usr/local/gcc-3.2.3

#
# X11_LIB_DIR, X11_INCLUDE:
# Where to look for X11 libs and includes 
#
X11_LIB_DIR = /usr/X11R6/lib
X11_INCLUDE =  -I/usr/X11R6/include
X11_LINK = -L${X11_LIB_DIR} -lXt -lXext -lX11
#For static compiles use this line
#X11_LINK = -L${X11_LIB_DIR} -Wl,-Bstatic -lXt -lXext -lX11 -lSM -lICE 

#
# EXODUS_LIB_DIR, EXODUS_INCLUDE:
# Where to look for EXODUS includes and libs
#
EXODUS_INCLUDE =   -I$(CUBITROOT)/exodus/exodus-4.01/include
EXODUS_LIB_DIR = $(CUBITROOT)/exodus/exodus-4.01/lib
EXODUS_LIBS = -lexoIIv2c401

NETCDF_INCLUDE = -I$(CUBITROOT)/netcdf/netcdf-3.4.snl3/include
NETCDF_LIB_DIR = $(CUBITROOT)/netcdf/netcdf-3.4.snl3/lib
NETCDF_LIBS = -lnetcdf

#
# LP_SOLVE_INCLUDE and LP_SOLVE_LIB_DIR
# Where to look for LP Solve includes and libs
#
LP_SOLVE_INCLUDE = -I$(CUBITROOT)/include
LP_SOLVE_LIB_DIR = $(CUBITROOT)/lib

# GRAPH_DRAWING_INCLUDE, GRAPH_DRAWING_LIB_DIR
# and GRAPH_DRAWING_LIBS
# Where to look for Graph Drawing Package includes and libs

# Graph Drawing is used for viewing the Whisker weaving process
# and is not necessary for all of CUBIT.  If you do not want it,
# Then you can take the link out of the makefile (GRAPH_DRAWING_LIBS).
# Also you will need to take it out of the defines section in
# the MACH_CXXFLAGS
#GRAPH_DRAWING_INCLUDE = -I$(CUBITROOT)/include 
#GRAPH_DRAWING_LIB_DIR = $(CUBITROOT)/lib 
#GRAPH_DRAWING_LIBS = -L${GRAPH_DRAWING_LIB_DIR} -lgraphpack

#
# C and C++ includes (if not in the usual places) and extra system paths

C_INCLUDE = 
CC_INCLUDE = 
SYS_INCLUDE =

# Sometimes if we put an include path in the previous variable,
# the compile goes haywire.  But if we don't put the paths somewhere
# then makedepend can't find them.  This variable is kind of a dummy
# so that we can tell makedepend where to find things, but not have
# it affect the actual compile.

MAKE_DEPEND_INCLUDE =	-I$(EGCS_ROOT)/include/c++/3.2.3 \
			-I$(EGCS_ROOT)/include/c++/3.2.3/backward \
			-I$(EGCS_ROOT)/include/c++/3.2.3/i686-pc-linux-gnu/ \
			-I$(EGCS_ROOT)/lib/gcc-lib/i686-pc-linux-gnu/3.2.3/include


# These include macros are for basic cubit versions. To set for
# parallel operations (MPI), create a COMM_INCLUDE_OPTION
# with the definition, -I$(MPI_INCLUDE_DIR)

EXTRA_INCLUDE = $(COMM_INCLUDE_OPTION)

#
# OptMS Package
#
# OPTMS_OPTION should be ON or OFF, indicating whether to link
# in the library or not.
#
#   **IMPORTANT!!!**
#  After changing the value of OPTMS_OPTION, you need to type
#  'make optms_files', or the affected files won't get recompiled!!!!
#
OPTMS_OPTION = OFF
OPTMS_ROOT = $(CUBITROOT)/smooth_exp
OPTMS_INCLUDE = -I$(OPTMS_ROOT)/include
FORTRAN_LIB = -L$(EGCS_ROOT)/lib -lg2c
OPTMS_APP_LIB = 
OPTMS_LINK = -L$(OPTMS_ROOT)/lib -lOptMS $(FORTRAN_LIB) $(OPTMS_APP_LIB)

#MESQUITE OPTIONS
MESQUITE_VER = 08c1
MESQUITE_DIR = $(CUBITROOT)/mesquite/mesquite_$(MESQUITE_VER)
MESQUITE_OPTION = ON
MESQUITE_INCLUDE = -I$(MESQUITE_DIR)/include
MESQUITE_LIB_DIR = $(MESQUITE_DIR)/lib/Lin
MESQUITE_LIB     = -lmesquite$(MESQUITE_VER)
MESQUITE_FLAGS = -DUSE_C_PREFIX_INCLUDES -DUSE_STD_INCLUDES


# camal variables
CAMAL_LIB_DIR	= $(SOURCE_DIR)/camal/lib/Linux

# Simulog/INRIA tet library; set to ON to link in INRIA tet mesher,
# otherwise set to OFF
SIMULOG_OPTION	= ON
SIMULOG_LIB_DIR	= $(CUBITROOT)/camal/camal2.0.2/lib/Linux

# feature-based decomp'n sources; set to ON to link in feature-based decomp'n,
# otherwise set to OFF
FEATURE_OPTION = ON

# Medial sources; set to ON to link in the medial axis based work.
# otherwise set to OFF
MEDIAL_OPTION = OFF
MEDIAL_DEFINE =
MEDIAL_INCLUDES =
#MEDIAL_OPTION = ON
#MEDIAL_DEFINE = -DUSING_MEDIAL
#MEDIAL_INCLUDES = -Imedial -Imedial/medial_util -Imedial/medial2D \
#	-Imedial/medial3D

# verdict variables
CUBIT_VERDICT_VERSION = 112
VERDICT_DIR = $(CUBITROOT)/verdict/verdict1.1.2
VERDICT_LIB_DIR =  $(VERDICT_DIR)/lib
VERDICT_LIB = -lverdict$(CUBIT_VERDICT_VERSION) 
VERDICT_INCLUDE =  -I${VERDICT_DIR}/include 


# showviz settings
VTK_DIR = $(CUBITROOT)/VTK/VTK-4.2.2
VTK_LIB_DIR = $(VTK_DIR)/lib/vtk
VTK_INCLUDE = -I${VTK_DIR}/include/vtk -I./showviz/geom -I./showviz/mesh
VTK_LINK = -L$(VTK_LIB_DIR) -lvtkHybrid -lvtkIO -lvtkRendering -lvtkftgl \
           -lvtkfreetype -lvtkImaging -lvtkGraphics -lvtkFiltering -lvtkCommon\
            -lvtkexpat -lvtkjpeg -lvtkpng -lvtktiff -lvtkzlib -lpthread

SHOWVIZ_OPTION=ON
HOOPS_OPTION=OFF

# HOOPS variables - these variables are more system dependent than others -
# make sure to check these carefully 
#

# HOOPS_LIB_DIR:
# where to find HOOPS libraries libhoops.a and libhoops.sl
# if you want static cubit add in the -lhoops-nonsb line and
# comment out the -lhoops line

CUBIT_HOOPS_VERSION = 620
HOOPS_DIR = $(CUBITROOT)/hoops/hoops-6.20
HOOPS_LIB_DIR =  $(HOOPS_DIR)/lib
#dynamic
HOOPS_LIB = -lhoops$(CUBIT_HOOPS_VERSION) -L/usr/lib -ldl
#static
#HOOPS_LIB = -Wl,-Bstatic -lhoops600 -L/usr/lib -ldl


# HOOPS_INCL_DIR:
# where to find HOOPS includes
#
HOOPS_INCLUDE =  -I${HOOPS_DIR}/include

# EXTRA_LIBS:
EXTRA_LIBS_LINK = 

####Define which solid modeling engine you will use, or all of them...
SOLID_MODELER_DEFINES = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS \
			-DACIS_STEP_TRANSLATOR \
			-DACIS_IGES_TRANSLATOR 

#
#ACIS 14.1 version
#
CUBIT_ACIS_VERSION = 1401
ACIS_VERSION = 1401
ACIS_DIR =  $(CUBITROOT)/acis/acis14.1
ACIS_SYSTEM = linux_so
ACIS_LIB_DIR =  $(ACIS_DIR)/bin/$(ACIS_SYSTEM)

ACIS_INCLUDE = -I$(ACIS_DIR)/include

ACIS_ARCH = linux

ACIS_LINK       = -L${ACIS_LIB_DIR}\
		-lacisstep\
		-lacisiges\
		-lxiges\
		-lxstep\
		-lxacis2k\
		-lxcore2k\
		-lSPAXAcisBase\
                -lSPAXAssemblyRep\
                -lSPAXDefaultGeometryRep\
		-lSpaAVis\
		-lSpaAWarp\
		-lSpaASurf\
		-lSpaALops\
		-lSpaABlend\
		-lSPAXInterop\
		-lSPAXBase\
		-lSpaACIS\
		-lSpaBase 


#
#ACIS 13.2 version
#
#CUBIT_ACIS_VERSION = 1302
#ACIS_VERSION = 1302
#ACIS_DIR =  $(CUBITROOT)/acis/acis13.2
#ACIS_SYSTEM = linux_so
#ACIS_LIB_DIR =  $(ACIS_DIR)/bin/$(ACIS_SYSTEM)

#ACIS_INCLUDE = -I$(ACIS_DIR)/include

#ACIS_ARCH = linux

#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lxstep\
#		-lxacis2k\
#		-lxcore2k\
#		-lxutil\
#		-lacisstep\
#		-lxiges\
#		-lacisiges\
#		-lSPAXBase \
#		-lSPAXInterop \
#		-lSPAXAssemblyRep \
#		-lSpaAWarp\
#		-lSpaAVis\
#		-lSpaASurf\
#		-lSpaALops\
#		-lSpaABlend\
#		-lSpaACIS\
#		-lSpaBase



#
#ACIS 11.0.3 version
#
#CUBIT_ACIS_VERSION = 1100
#ACIS_VERSION = 1100
#ACIS_DIR =  $(CUBITROOT)/acis/acis11.5
#ACIS_SYSTEM = linux_so
#ACIS_LIB_DIR =  $(ACIS_DIR)/bin/$(ACIS_SYSTEM)
#
#ACIS_INCLUDE = -I$(ACIS_DIR)/include
#
#ACIS_ARCH = linux
#
#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lxstep\
#		-lxacis2k\
#		-lxcore2k\
#		-lxutil\
#		-lacisstep\
#		-lxiges\
#		-lacisiges\
#		-lSpaAWarp\
#		-lSpaAVis\
#		-lSpaASurf\
#		-lSpaALops\
#		-lSpaABlend\
#		-lSpaACIS\
#		-lSpaBase



#ACIS 7.0.5 version
#
#CUBIT ACIS version 7.0

### Note that you can also use these, if you have the right license
# and are using acis 7.0.x
#-DACIS_CATIA_TRANSLATOR -DACIS_PROE_TRANSLATOR
# if you add them, then add the following to the ACIS_LINK below
#		-lcathusk \
#		-lproehusk \
#		-lxgeometric \
#

#CUBIT_ACIS_VERSION = 700
#ACIS_DIR =  $(CUBITROOT)/acis/acis7.0.5
#ACIS_VERSION = 700
#ACIS_SYSTEM = linux_so
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)

#ACIS_INCLUDE = -I$(ACIS_DIR) \
#		-I$(ACIS_DIR)/kern \
#		-I$(ACIS_DIR)/base \
#		-I$(ACIS_DIR)/law \
#		-I$(ACIS_DIR)/fct \
#		-I$(ACIS_DIR)/intr \
#		-I$(ACIS_DIR)/swp \
#		-I$(ACIS_DIR)/blnd \
#		-I$(ACIS_DIR)/covr \
#		-I$(ACIS_DIR)/bool \
#		-I$(ACIS_DIR)/cstr \
#		-I$(ACIS_DIR)/eulr \
#		-I$(ACIS_DIR)/ofst \
#		-I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/heal \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/step \
#		-I$(ACIS_DIR)/lopt \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/proe \
#		-I$(ACIS_DIR)/catia \
#		-I$(ACIS_DIR)/shl \
#		-I$(ACIS_DIR)/oper \
#		-I$(ACIS_DIR)/ct \
#		-I$(ACIS_DIR)/sbool 

#ACIS_ARCH = linux
#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lhealhusk \
#		-ligeshusk \
#		-lstephusk \
#		-lcaselib \
#		-lshl_husk \
#		-llop_husk \
#		-lblend \
#		-lsweep \
#		-lsbool \
#		-lskin \
#		-lcover \
#		-loffset \
#		-ltransutl \
#		-loperator \
#		-lrem_husk \
#		-lrbi_husk \
#		-llopt_husk \
#		-lboolean \
#		-lskin \
#		-lga_husk \
#		-lrnd_husk \
#		-lct_husk \
#		-leuler \
#		-lconstrct \
#		-lfaceter \
#		-lintersct \
#		-lkernel \
#		-llawutil \
#		-lbaseutil 



#
#ACIS 6.2 version
#
#CUBIT ACIS version 6.2
#CUBIT_ACIS_VERSION = 602
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.2

#
#ACIS 6.1 version
#
#CUBIT ACIS version 6.1
#CUBIT_ACIS_VERSION = 601
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.1

#
#ACIS 6.0 version
#
#CUBIT ACIS version 6.0
#CUBIT_ACIS_VERSION = 600
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.0

#ACIS_VERSION = 600
#ACIS_SYSTEM = linux_so
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)

#ACIS_INCLUDE = -I$(ACIS_DIR) \
#		-I$(ACIS_DIR)/kern \
#		-I$(ACIS_DIR)/base \
#		-I$(ACIS_DIR)/law \
#		-I$(ACIS_DIR)/fct \
#		-I$(ACIS_DIR)/intr \
#		-I$(ACIS_DIR)/swp \
#		-I$(ACIS_DIR)/blnd \
#		-I$(ACIS_DIR)/covr \
#		-I$(ACIS_DIR)/bool \
#		-I$(ACIS_DIR)/cstr \
#		-I$(ACIS_DIR)/eulr \
#                -I$(ACIS_DIR)/ofst \
#		-I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/heal \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/step \
#		-I$(ACIS_DIR)/lopt \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/oper 

#ACIS_ARCH = linux
#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lhealhusk \
#		-ligeshusk \
#		-lstephusk \
#		-lcaselib \
#		-llop_husk \
#		-lblend \
#		-lsweep \
#		-lsbool \
#		-lskin \
#		-lcover \
#		-loffset \
#		-ltransutl \
#		-loperator \
#		-lrem_husk \
#		-lrbi_husk \
#		-llopt_husk \
#		-lboolean \
#		-lskin \
#		-lga_husk \
#		-lrnd_husk \
#		-lct_husk \
#		-leuler \
#		-lconstrct \
#		-lfaceter \
#		-lintersct \
#		-lkernel \
#		-lspline \
#		-lkernel \
#		-llawutil \
#		-lbaseutil 


#ACIS 5.3 version

###Define which solid modeling engine you will use, or all of them...
#SOLID_MODELER_DEFINES = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS \
#			-DACIS_IGES_TRANSLATOR -DMMGR_FREELIST
#
 #CUBIT ACIS version 5.3
#CUBIT_ACIS_VERSION = 503
#ACIS_VERSION = 500
##No shared libraries yet for linux
#ACIS_SYSTEM = linux
#ACIS_DIR =  $(CUBITROOT)/acis/acis5.3
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)
#
#ACIS_INCLUDE = -I$(ACIS_DIR) \
#                -I$(ACIS_DIR)/kern \
#                -I$(ACIS_DIR)/fct \
#                -I$(ACIS_DIR)/intr \
#                -I$(ACIS_DIR)/swp \
#                -I$(ACIS_DIR)/covr \
#                -I$(ACIS_DIR)/bool \
#                -I$(ACIS_DIR)/cstr \
#                -I$(ACIS_DIR)/eulr \
#                -I$(ACIS_DIR)/ofst \
#                -I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/mmgr \
#	        -I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/heal
#
#ACIS_ARCH = linux
#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lmmgrhusk \
#		-ligeshusk \
#		-loperator \
#		-ltransutl \
#		-lga_husk \
#		-lskin \
#		-lsweep \
#		-lhealhusk \
#		-lboolean \
#		-llop_husk \
#		-lblend \
#		-leuler \
#		-lcover \
#		-loffset \
#		-lct_husk \
#		-lconstrct \
#		-lrem_husk \
#		-llopt_husk \
#	        -lrbi_husk \
#		-lfaceter \
#		-lintersct \
#		-lkernel \
#		-lspline \
#		-lkernel 

#
#ACIS 5.2 version
#
####Define which solid modeling engine you will use, or all of them...
#SOLID_MODELER_DEFINES = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS \
#			-DACIS_IGES_TRANSLATOR -DMMGR_FREELIST
#
#CUBIT ACIS version 5.2
#CUBIT_ACIS_VERSION = 502
#ACIS_VERSION = 500
#No shared libraries yet for linux
#ACIS_SYSTEM = linux
#ACIS_DIR =  $(CUBITROOT)/acis/acis5.2
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)
#
#ACIS_INCLUDE = -I$(ACIS_DIR) \
#                -I$(ACIS_DIR)/kern \
#                -I$(ACIS_DIR)/fct \
#                -I$(ACIS_DIR)/intr \
#                -I$(ACIS_DIR)/swp \
#                -I$(ACIS_DIR)/covr \
#                -I$(ACIS_DIR)/bool \
#                -I$(ACIS_DIR)/cstr \
#                -I$(ACIS_DIR)/eulr \
#                -I$(ACIS_DIR)/ofst \
#                -I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/mmgr \
#	        -I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/heal

#ARCH = linux
#ACIS_LIBS       = -L${ACIS_LIB_DIR}\
#		-lmmgrhusk \
#		-ligeshusk \
#		-loperator \
#		-ltransutl \
#		-lga_husk \
#		-lskin \
#		-lsweep \
#		-lhealhusk \
#		-lboolean \
#		-llop_husk \
#		-lblend \
#		-leuler \
#		-lcover \
#		-loffset \
#		-lct_husk \
#		-lconstrct \
#		-lrem_husk \
#		-llopt_husk \
#	        -lrbi_husk \
#		-lfaceter \
#		-lintersct \
#		-lkernel \
#		-lspline \
#		-lkernel 

ACIS_DEFINES =  -D$(ACIS_ARCH) -D$(ACIS_SYSTEM) -DCXX30\
                -DACIS$(CUBIT_ACIS_VERSION) \
                -DPOINT_VERSION=0 -DCUBIT_ACIS_VERSION=$(CUBIT_ACIS_VERSION) \
                -DAGVER=105 -DANSI -DNO_DTORS

ACIS_WARNING_FLAGS = -Wno-non-virtual-dtor \
                     -Wno-ctor-dtor-privacy \
                     -Wno-reorder \
                     -Wno-comment

# Template Flag.  This has become necessary because of the move to HP's
# aCC compiler.  If using aCC, uncomment the next line, otherwise, leave
# everything the way it is
TEMPLATE_FLAG = 

# Template files that need to be compiled differently depending on the 
# platform.  The Linux platform has to #include the .cpp file into the .hpp
# file, and so has to have it taken out of the makefile.  So, we declare the
# *_TEMPLATES variable and set it or not, depending on the platform.
LIST_TEMPLATES =
FEATURE_TEMPLATES = 
GEOM_TEMPLATES =

# Debug Flags, before CUBIT 2.0, this was in the makefile.  It was moved
# here to be less tempting for the makefile with a different option
# to be checked in.

# Linux can optimize and debug at the same time.
#DEBUG_FLAG = -O -ffloat-store -Wall
DEBUG_FLAG = -g -W -Wall -Wno-parentheses -Wno-switch -gstabs+

# These compile flags are for basic cubit versions. To set for no graphics
# or parallel operations (MPI), add the -DNO_GRAPHICS and
# -DMPI_COMMUNICATIONS_ENABLED
# flags to GRAPHICS_OPTION and COMM_OPTION respectively

MACH_CFLAGS = $(ACIS_DEFINES) -DLINUX -DTEMPLATE_DEFS_INCLUDED \
              $(GRAPHICS_OPTION) $(COMM_OPTION) \
              -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION)

# if you are doing graph drawing stuff (whisker weaving), then 
# you need to uncomment the next line and comment the other
# MACH_CXXFLAGS one.

#MACH_CXXFLAGS = $(ACIS_DEFINES) -DHP -DANSI -DXTFUNCPROTO -z \
#                -DGRAPH_DRAWING $(GRAPHICS_OPTION) $(COMM_OPTION) # -G
#MACH_CXXFLAGS = $(ACIS_DEFINES) -DLINUX -DRTTI -DANSI -DXTFUNCPROTO \
#		$(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) \
#                $(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG) # -G
MACH_CXXFLAGS = $(ACIS_DEFINES) -DCUBIT -DLINUX -DTEMPLATE_DEFS_INCLUDED \
		-DANSI -DXTFUNCPROTO \
		-DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION) \
		$(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) \
                -Wno-deprecated \
                $(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG) # -G

# at least all -D and -I options from MACH_CXXFLAGS go here for makedepend
MACH_DEPEND_FLAGS = $(ACIS_DEFINES) -DLINUX -DTEMPLATE_DEFS_INCLUDED \
		-DANSI -DXTFUNCPROTO \
		-DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION) \
		$(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) \
                $(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG) # -G


# for Linux:
MACH_LIBS_LINK = 

#if you want static cubit, uncomment this line (with the -Wl...)
#MACH_LFLAGS = -Wl,-a,archive
#MACH_LFLAGS = -G
MACH_LFLAGS = $(TEMPLATE_FLAG)

# Define the flags for building shared libraries
LD_SHARE = -shared


# Some controls on echoing of compile commands; for verbose output, comment
# out the following two definitions
PREFIX = @
LINK_PREFIX = ${PREFIX}
ARCHIVE_PREFIX = ${PREFIX}
ECHO_COMMAND = @ echo "Compiling: $<"

## You can change this to filter the output of the compilation
#
#ACIS_GREP_FILTER = /usr/bin/egrep -v '(([.]hxx)|ATTRIB).*(::fixup_copy|::copy_common)'
#ACIS_FILTER = 2> compile_errors.txt ; \
#	${ACIS_GREP_FILTER} compile_errors.txt ; \
#	/bin/rm compile_errors.txt
ACIS_FILTER = 

# Some compiler definitions - check your environment to make sure the correct
# compilers are being referenced
#
# CC:
CXX = g++
CC = gcc
LINKER = ${CXX}
ARCHIVER = ar ru 

# MAKEDEPEND:
# the following command uses the compiler to compute dependencies (uses option
# to exclude system includes)
#MAKEDEPEND = ${CXX} -MM
# the following command uses our locally compiled makedepend to compute 
# dependencies (faster than compiler-driven make depend)
MAKEDEPEND = $(CUBITROOT)/mklin/makedepend -f-

CUBIT_HELP_DIR = $(SOURCE_DIR)
