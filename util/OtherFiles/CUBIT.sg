#
# This file contains make macro definitions needed for a cubit developers
# installation.  This file is included directly into the CUBIT makefile,
# so definitions are in make macro format

# This is useful to define if many of your libraries are found under
# a common directory
CUBITROOT = $(ES_HOME)/cubit

# SOURCE_DIR:
# Developer's primary cubit source directory (i.e. the directory from which
# cvs operations are done)
#
SOURCE_DIR = .

# There are many possible formats for SGI executables.
# Valid choices are O32, N32, and N64.  You MUST pick one!
CUBIT_ABI_FORMAT = N32
#CUBIT_ABI_FORMAT = N64

# option to force linker to export symbols for the following object, archive or DSO.
#  e.g. CC -shared -o mylib.so myfile.o -exports mylib.a
#  will make symbols in mylib.a accessable to code that links with mylib.so
EXPORT_SYMBOLS = -exports 


# X11_LIB_DIR, X11_INCLUDE:
# Where to look for X11 libs and includes
X11_LIB_DIR_O32 = /usr/lib
X11_LIB_DIR_N32 = /usr/lib32
X11_LIB_DIR_N64 = /usr/lib64
X11_LIB_DIR = $(X11_LIB_DIR_$(CUBIT_ABI_FORMAT))
X11_INCLUDE =  -I/usr/include/X11
X11_LINK = -L${X11_LIB_DIR} -lXt -lXext -lX11

#
# EXODUS_LIB_DIR, EXODUS_INCLUDE:
# Where to look for EXODUS includes and libs
#
#EXODUS_INCLUDE =   -I$(CUBITROOT)/exodus/exodus_temp/include
EXODUS_INCLUDE =   -I$(CUBITROOT)/exodus/exodus-4.01/include
EXODUS_LIB_DIR_O32 = $(CUBITROOT)/exodus/exodus-4.01/lib/irix65_o32
EXODUS_LIB_DIR_N32 = $(CUBITROOT)/exodus/exodus-4.01/lib/irix65_n32
EXODUS_LIB_DIR_N64 = $(CUBITROOT)/exodus/exodus-4.01/lib/irix65_n64
EXODUS_LIB_DIR = $(EXODUS_LIB_DIR_$(CUBIT_ABI_FORMAT))
EXODUS_LIBS = -lexoIIv2c401

NETCDF_INCLUDE = -I$(CUBITROOT)/netcdf/netcdf-3.4.snl/include
NETCDF_LIB_DIR_N32 = $(CUBITROOT)/netcdf/netcdf-3.4.snl/lib/irix65_n32
NETCDF_LIB_DIR_N64 = $(CUBITROOT)/netcdf/netcdf-3.4.snl/lib/irix65_n64
NETCDF_LIB_DIR = $(NETCDF_LIB_DIR_$(CUBIT_ABI_FORMAT))
NETCDF_LIBS = -lnetcdf

# Graph Drawing is used for viewing the Whisker weaving process
# and is not necessary for all of CUBIT.  If you do not want it,
# or if it is not available, then you can comment this out.
#GRAPH_DRAWING_INCLUDE = -I$(CUBITROOT)/include 
#GRAPH_DRAWING_LIB_DIR = $(CUBITROOT)/lib 
#GRAPH_DRAWING_LINK = -L${GRAPH_DRAWING_LIB_DIR} -lgraphpack

#
# LP_SOLVE_INCLUDE and LP_SOLVE_LIB_DIR
# Where to look for LP Solve includes and libs
#
LP_SOLVE_INCLUDE = -I$(CUBITROOT)/lp_solve
LP_SOLVE_LIB_DIR_O32 = $(CUBITROOT)/lp_solve/lib/lib_o32
LP_SOLVE_LIB_DIR_N32 = $(CUBITROOT)/lp_solve/lib/lib_n32
LP_SOLVE_LIB_DIR_N64 = $(CUBITROOT)/lp_solve/lib/lib_n64
LP_SOLVE_LIB_DIR = $(LP_SOLVE_LIB_DIR_$(CUBIT_ABI_FORMAT))

#
# C and C++ includes (if not in the usual places) and extra system paths
# Note: these are uneeded on the hp. By being undefined, they will not
# even show up on the link/compile lines.
C_INCLUDE = -I/usr/include
CC_INCLUDE = -I/usr/include/CC
SYS_INCLUDE = -I/usr/include/sys

# Sometimes if we put an include path in the previous variable,
# the compile goes haywire.  But if we don't put the paths somewhere
# then makedepend can't find them.  This variable is kind of a dummy
# so that we can tell makedepend where to find things, but not have
# it affect the actual compile.
MAKE_DEPEND_INCLUDE = 
 
# These include macros are for basic cubit versions. To set for
# parallel operations (MPI), create a COMM_INCLUDE_OPTION
# with the definition, -I$(MPI_INCLUDE_DIR)
 
EXTRA_INCLUDE = $(COMM_INCLUDE_OPTION)

#
# OptMS Package
#
# OPTMS_OPTION should be ON or OFF, indicating whether to link
# in the library or not.
#
#   **IMPORTANT!!!**
#  After changing the value of OPTMS_OPTION, you need to type
#  'make optms_files', or the affected files won't get recompiled!!!!
#
OPTMS_OPTION = OFF
OPTMS_ROOT = $(CUBITROOT)/smooth_exp
OPTMS_INCLUDE = -I$(OPTMS_ROOT)/include
OPTMS_LIB_DIR_O32 = $(OPTMS_ROOT)/lib/sgi_irix65_o32
OPTMS_LIB_DIR_N32 = $(OPTMS_ROOT)/lib/sgi_irix65_n32
OPTMS_LIB_DIR_N64 = $(OPTMS_ROOT)/lib/sgi_irix65_64
FORTRAN_LIB = -lftn -lfortran -lm
OPTMS_APP_LIB = -lm
OPTMS_LINK = -L$(OPTMS_LIB_DIR_$(CUBIT_ABI_FORMAT)) -lOptMS \
         $(OPTMS_APP_LIB) $(OPTMS_LIB_DIR_$(CUBIT_ABI_FORMAT))/blas.a

#MESQUITE OPTIONS
MESQUITE_VER = 08c1
MESQUITE_DIR = $(CUBITROOT)/mesquite/mesquite_$(MESQUITE_VER)
MESQUITE_OPTION = ON
MESQUITE_INCLUDE = -I$(MESQUITE_DIR)/include
MESQUITE_LIB_DIR_N32 = $(MESQUITE_DIR)/lib/SGI32/
MESQUITE_LIB_DIR_N64 = $(MESQUITE_DIR)/lib/SGI64/
MESQUITE_LIB_DIR = $(MESQUITE_LIB_DIR_$(CUBIT_ABI_FORMAT))
MESQUITE_LIB     = -lmesquite$(MESQUITE_VER)
MESQUITE_FLAGS = -DUSE_STD_INCLUDES


# camal variables
CAMAL_LIB_N32	= $(SOURCE_DIR)/camal/lib/IRIX
CAMAL_LIB_N64	= $(SOURCE_DIR)/camal/lib/IRIX64
CAMAL_LIB_DIR	= $(CAMAL_LIB_$(CUBIT_ABI_FORMAT))

# Simulog/INRIA tet sources; set to ON to link in INRIA tet mesher,
# otherwise set to OFF
SIMULOG_OPTION = ON
SIMULOG_LIB_N32	= $(CUBITROOT)/camal/camal2.0.2/lib/IRIX
SIMULOG_LIB_N64	= $(CUBITROOT)/camal/camal2.0.2/lib/IRIX64
SIMULOG_LIB_DIR	= $(SIMULOG_LIB_$(CUBIT_ABI_FORMAT))

# feature-based decomp'n sources; set to ON to link in feature-based decomp'n,
# otherwise set to OFF
FEATURE_OPTION = ON

# Medial sources; set to ON to link in the medial axis based work.
# otherwise set to OFF
MEDIAL_OPTION = OFF
MEDIAL_DEFINE =
MEDIAL_INCLUDES =
#MEDIAL_OPTION = ON
#MEDIAL_DEFINE = -DUSING_MEDIAL
#MEDIAL_INCLUDES = -Imedial -Imedial/medial_util -Imedial/medial2D \
#	-Imedial/medial3D

# verdict variables
CUBIT_VERDICT_VERSION = 112
VERDICT_DIR = $(CUBITROOT)/verdict/verdict1.1.2
VERDICT_LIB_DIR =  $(VERDICT_DIR)/lib$(CUBIT_ABI_FORMAT)
VERDICT_LIB = -lverdict$(CUBIT_VERDICT_VERSION)
VERDICT_INCLUDE =  -I${VERDICT_DIR}/include


# showviz settings
VTK_DIR = $(CUBITROOT)/VTK/VTK-4.2.2-$(CUBIT_ABI_FORMAT)
VTK_LINK = -L${VTK_DIR}/lib/vtk -lvtkHybrid -lvtkIO -lvtkRendering -lvtkftgl -lvtkfreetype\
           -lvtkImaging -lvtkGraphics -lvtkFiltering -lvtkCommon -lvtkexpat -lvtkjpeg -lvtkpng -lvtktiff -lvtkzlib -lpthread
VTK_INCLUDE = -I${VTK_DIR}/include/vtk

SHOWVIZ_OPTION=ON
HOOPS_OPTION=OFF

# HOOPS variables - these variables are more system dependent than others -
# make sure to check these carefully 
#
# HOOPS needs additional system libraries linked in, which vary depending
# which system you're on
# for the HP:
EXTRA_HOOPS_LIB = 
CUBIT_HOOPS_VERSION = 620
HOOPS_DIR = $(CUBITROOT)/hoops/hoops6.2
#HOOPS_DIR = $(CUBITROOT)/hoops/hoops4.41
HOOPS_INCLUDE = -I$(HOOPS_DIR)/include 
#HOOPS_LIB_DIR_O32 = $(HOOPS_DIR)/lib/libo32
HOOPS_LIB_DIR_O32 = $(HOOPS_DIR)/lib/libo32_static
#HOOPS_LIB_DIR_N32 = $(HOOPS_DIR)/lib/libn32
HOOPS_LIB_DIR_N32 = $(HOOPS_DIR)/lib/libn32_static
#HOOPS_LIB_DIR_N64 = $(HOOPS_DIR)/lib/lib64
HOOPS_LIB_DIR_N64 = $(HOOPS_DIR)/lib/lib64_static
HOOPS_LIB_DIR = $(HOOPS_LIB_DIR_$(CUBIT_ABI_FORMAT))
HOOPS_LIB = -lhoops$(CUBIT_HOOPS_VERSION)


####Define which solid modeling engine you will use, or all of them...
#SOLID_MODELER_DEFINES = -DACIS_3D

## Note that the 64-bit platform has no translators, so remove
# -DACIS_IGES_TRANSLATOR and -DACIS_STEP_TRANSLATOR from this line
# and delete the linking parts down below
SOLID_MODELER_DEFINES_N32 = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS -DACIS_IGES_TRANSLATOR -DACIS_STEP_TRANSLATOR
SOLID_MODELER_DEFINES_N64 = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS
SOLID_MODELER_DEFINES = $(SOLID_MODELER_DEFINES_$(CUBIT_ABI_FORMAT))

# EXTRA_LIBS:
EXTRA_LIBS_N64 = -lm -lGL $(MPI_LINK)
EXTRA_LIBS_N32 = -lm -lfm -lGL -lgl $(MPI_LINK)
EXTRA_LIBS_LINK = $(EXTRA_LIBS_$(CUBIT_ABI_FORMAT))

### ACIS 14.x version ###
CUBIT_ACIS_VERSION = 1401
ACIS_VERSION = 1400
ACIS_DIR =  $(CUBITROOT)/acis/acis14.1

### ACIS 13.x version ###
#CUBIT_ACIS_VERSION = 1302
#ACIS_VERSION = 1300
#ACIS_DIR =  $(CUBITROOT)/acis/acis13.2

### ACIS 11.x version ###
#CUBIT_ACIS_VERSION = 1100
#ACIS_VERSION = 1100
#ACIS_DIR =  $(CUBITROOT)/acis/acis11.5

### ACIS 7.x version ###
#CUBIT_ACIS_VERSION = 700
#ACIS_VERSION = 700
#ACIS_DIR =  $(CUBITROOT)/acis/acis7.0.5

####If you want shared libraries, do "sgi_so", else do "sgi"
# Shared libraries dont' link in the libraries statically to the
# cubit executable.  This decreases executable size if you have
# acis running on the machines you will run CUBIT.
ACIS_SYSTEM_N32 = sgi_so
ACIS_SYSTEM_N64 = sgi_64_so
ACIS_SYSTEM = $(ACIS_SYSTEM_$(CUBIT_ABI_FORMAT))
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)
ACIS_LIB_DIR =  $(ACIS_DIR)/bin/$(ACIS_SYSTEM)
ACIS_INCLUDE = -I$(ACIS_DIR)/include
ACIS_LINK_N64 = -L${ACIS_LIB_DIR}\
		-lSpaAWarp\
		-lSpaAVis\
		-lSpaASurf\
		-lSpaALops\
		-lSpaABlend\
		-lSpaACIS\
		-lSpaBase

ACIS_LINK_N32 = -L${ACIS_LIB_DIR}\
		-lacisstep\
		-lacisiges\
		-lxiges\
		-lxstep\
		-lxacis2k\
		-lxcore2k\
		-lSPAXAcisBase\
                -lSPAXAssemblyRep\
                -lSPAXDefaultGeometryRep\
		-lSpaAVis\
		-lSpaAWarp\
		-lSpaASurf\
		-lSpaALops\
		-lSpaABlend\
		-lSPAXInterop\
		-lSPAXBase\
		-lSpaACIS\
		-lSpaBase 


ACIS_LINK = $(ACIS_LINK_$(CUBIT_ABI_FORMAT))

#ACIS_INCLUDE = -I$(ACIS_DIR) \
#		-I$(ACIS_DIR)/kern \
#		-I$(ACIS_DIR)/base \
#		-I$(ACIS_DIR)/law \
#		-I$(ACIS_DIR)/fct \
#		-I$(ACIS_DIR)/intr \
#		-I$(ACIS_DIR)/swp \
#		-I$(ACIS_DIR)/blnd \
#		-I$(ACIS_DIR)/covr \
#		-I$(ACIS_DIR)/bool \
#		-I$(ACIS_DIR)/cstr \
#		-I$(ACIS_DIR)/eulr \
#		-I$(ACIS_DIR)/ofst \
#		-I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/heal \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/step \
#		-I$(ACIS_DIR)/lopt \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/mmgr \
#		-I$(ACIS_DIR)/shl \
#		-I$(ACIS_DIR)/oper \
#		-I$(ACIS_DIR)/ct \
#		-I$(ACIS_DIR)/sbool 

ACIS_ARCH = sgi

# Note that the 64-bit platform has no translators, so take out the lines:
# -ligeshusk, -lstephusk, and -lxgeometric

#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lhealhusk \
#		-ligeshusk \
#		-lshl_husk \
#		-lstephusk \
#		-lxgeometric \
#		-lcaselib \
#		-ltransutl \
#		-loperator \
#		-llop_husk \
#		-lrem_husk \
#		-llopt_husk \
#		-lblend \
#		-lsweep \
#		-lsbool \
#		-lcover \
#		-lskin \
#		-loffset \
#		-lboolean \
#		-lct_husk \
#		-leuler \
#		-lconstrct \
#		-lfaceter \
#		-lga_husk \
#		-lrnd_husk \
#		-lintersct \
#		-lkernel \
#		-lrbi_husk \
#		-llawutil \
#		-lbaseutil \
#		-lkernel 

#ACIS_INCLUDE = -I$(ACIS_DIR) \
#		-I$(ACIS_DIR)/kern \
#		-I$(ACIS_DIR)/fct \
#		-I$(ACIS_DIR)/intr \
#		-I$(ACIS_DIR)/swp \
#		-I$(ACIS_DIR)/covr \
#		-I$(ACIS_DIR)/bool \
#		-I$(ACIS_DIR)/cstr \
#		-I$(ACIS_DIR)/eulr \
#		-I$(ACIS_DIR)/ofst \
#		-I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/heal \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/step \
#		-I$(ACIS_DIR)/lopt \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/mmgr \
#		-I$(ACIS_DIR)/oper
#
#ACIS_ARCH = sgi
#ACIS_LINK     = -L${ACIS_LIB_DIR}\
#		-lhealhusk \
#		-ligeshusk \
#		-ltransutl \
#		-loperator \
#		-llop_husk \
#		-lrem_husk \
#		-llopt_husk \
#		-lblend \
#		-lsweep \
#		-lcover \
#		-lskin \
#		-loffset \
#		-lboolean \
#		-lct_husk \
#		-leuler \
#		-lconstrct \
#		-lfaceter \
#		-lga_husk \
#		-lintersct \
#		-lkernel \
#		-lspline \
#		-lkernel \
#		-lrbi_husk \
#		-lmmgrhusk

ACIS_DEFINES =  -D$(ACIS_ARCH) -D$(ACIS_SYSTEM) -DCXX30\
                -DACIS$(CUBIT_ACIS_VERSION) \
                -DCUBIT_ACIS_VERSION=$(CUBIT_ACIS_VERSION) -DPOINT_VERSION=0 \
                -DAGVER=105 -DANSI -DNO_DTORS

# Template files that need to be compiled differently depending on the 
# platform.  The Linux platform has to #include the .cpp file into the .hpp
# file, and so has to have it taken out of the makefile.  So, we declare the
# *_TEMPLATES variable and set it or not, depending on the platform.
LIST_TEMPLATES = DLIList.cpp \
		RTree.cpp \
		RTreeNode.cpp
FEATURE_TEMPLATES = FeatureTable.cpp
GEOM_TEMPLATES = BoundaryConstrainTool.cpp

## Optimized for o32
##DEBUG_FLAG = -O -Olimit 1600
## Optimized for n32 or n64
#DEBUG_FLAG = -O -OPT:Olimit=0
## Debug on for any version
DEBUG_FLAG = -g

PRO_DEFINES =

SMD_DEFINES_N32 =
SMD_DEFINES_N64 = -DSMD_HANDLE_VALUE_TYPE="unsigned long"
SMD_DEFINES = $(SMD_DEFINES_$(CUBIT_ABI_FORMAT))

# These compile flags are for basic cubit versions. To set for no graphics
# or parallel operations (MPI), add the -DNO_GRAPHICS and
# -DMPI_COMMUNICATIONS_ENABLED
# flags to GRAPHICS_OPTION and COMM_OPTION respectively

MACH_CFLAGS = $(SMD_DEFINES) $(ACIS_DEFINES) $(PRO_DEFINES) -prototypes -cckr -DSYSV -DSGI \
              -DANSI -DXTFUNCPROTO -I/usr/include \
              $(GRAPHICS_OPTION) $(COMM_OPTION) \
              -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION)
 
MACH_CXXFLAGS = $(SMD_DEFINES) $(ACIS_DEFINES) $(PRO_DEFINES) -DCUBIT -D__EXTERN_C__ -DSYSV -DSGI \
                -DANSI -DFUNCPROTO -DXTFUNCPROTO \
                -DNeedFunctionPrototypes -DMALLOC_0_RETURNS_NULL \
                $(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) \
                -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION)

# at least all -D and -I options from MACH_CXXFLAGS go here for makedepend
MACH_DEPEND_FLAGS = $(SMD_DEFINES) $(ACIS_DEFINES) $(PRO_DEFINES) -D__EXTERN_C__ -DSYSV -DSGI \
                -DANSI -DFUNCPROTO -DXTFUNCPROTO \
                -DNeedFunctionPrototypes -DMALLOC_0_RETURNS_NULL \
                $(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) \
                -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION) -D__sgi -D_STANDARD_C_PLUS_PLUS


MACH_LFLAGS    += -multigot
MACH_LIBS_LINK = 

# MPI Communication stuff - just comment out if not making parallel version
#MPI_ARCH        = sgi
#MPI_COMM        = ch_p4
#MPI_INSTALL_DIR = /usr/netpub/ftp.mcs.anl.gov/pub/mpi/mpi-1.0.11-install
#MPI_LIB_PATH    = -L$(MPI_INSTALL_DIR)/lib/$(MPI_ARCH)/$(MPI_COMM)
#MPI_LIB_LIST    = -lmpi -lsocket -lnsl -lthread

# Some controls on echoing of compile commands; for verbose output, comment
# out the following two definitions
PREFIX = @
LINK_PREFIX = ${PREFIX}
ARCHIVE_PREFIX = ${PREFIX}
ECHO_COMMAND = @ echo "Compiling: $<"

## You can change this to filter the output of the compilation
#
#ACIS_GREP_FILTER = /usr/bin/egrep -v '(([.]hxx)|ATTRIB).*(::fixup_copy|::copy_common)'
#ACIS_FILTER = 2> compile_errors.txt ; \
#	${ACIS_GREP_FILTER} compile_errors.txt ; \
#	/bin/rm compile_errors.txt
ACIS_FILTER = 

# Some compiler definitions - check your environment to make sure the correct
# compilers are being referenced
CXX_O32 = CC -o32
CXX_N32 = CC -n32 -LANG:std
CXX_N64 = CC -64 -LANG:std
CXX = $(CXX_$(CUBIT_ABI_FORMAT))
CC_O32 = cc -o32
CC_N32 = cc -n32
CC_N64 = cc -64
CC = $(CC_$(CUBIT_ABI_FORMAT))

LINKER = ${CXX}
ARCHIVER = $(CXX) -ar -o 

MAKEDEPEND = $(CUBITROOT)/makedepend/makedepend -f-

#MAKE = /usr/freeware/bin/gmake -j 2
MAKE = /usr/freeware/bin/gmake
#MAKE = /usr/bin/make

TEMPLATE_DIR = ii_files

CUBIT_HELP_DIR = $(SOURCE_DIR)
RM=rm -f

LD_SHARE = -shared
