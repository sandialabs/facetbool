#
# This file contains make macro definitions needed for a cubit developers
# installation.  This file is included directly into the CUBIT makefile,
# so definitions are in make macro format
#
CUBITROOT = $(CUBIT)
#
# SOURCE_DIR:
# Developer's primary cubit source directory (i.e. the directory from which
# cvs operations are done)
#
SOURCE_DIR = .

#
# X11_LIB_DIR, X11_INCLUDE:
# Where to look for X11 libs and includes 
#
X11_LIB_DIR = /usr/lib
X11_INCLUDE =  -I/usr/include/X11
X11_LINK = -L${X11_LIB_DIR} -lXt -lXext -lX11

#
# EXODUS_LIB_DIR, EXODUS_INCLUDE:
# Where to look for EXODUS includes and libs
#
EXODUS_INCLUDE =   -I$(CUBITROOT)/exodus/exodus-4.01/include
EXODUS_LIB_DIR = $(CUBITROOT)/exodus/exodus-4.01/lib
EXODUS_LIBS = -lexoIIv2c401

NETCDF_INCLUDE = -I$(CUBITROOT)/netcdf/netcdf-3.4.snl3/include
NETCDF_LIB_DIR = $(CUBITROOT)/netcdf/netcdf-3.4.snl3/lib
NETCDF_LIBS = -lnetcdf

#
# LP_SOLVE_INCLUDE and LP_SOLVE_LIB_DIR
# Where to look for LP Solve includes and libs
#
LP_SOLVE_INCLUDE = -I$(CUBITROOT)/include
LP_SOLVE_LIB_DIR = $(CUBITROOT)/lib

# GRAPH_DRAWING_INCLUDE, GRAPH_DRAWING_LIB_DIR
# and GRAPH_DRAWING_LIBS
# Where to look for Graph Drawing Package includes and libs

# Graph Drawing is used for viewing the Whisker weaving process
# and is not necessary for all of CUBIT.  If you do not want it,
# Then you can take the link out of the makefile (GRAPH_DRAWING_LIBS).
# Also you will need to take it out of the defines section in
# the MACH_CXXFLAGS
#GRAPH_DRAWING_INCLUDE = -I$(CUBITROOT)/include 
#GRAPH_DRAWING_LIB_DIR = $(CUBITROOT)/lib 
#GRAPH_DRAWING_LIBS = -L${GRAPH_DRAWING_LIB_DIR} -lgraphpack

#
# C and C++ includes (if not in the usual places) and extra system paths
C_INCLUDE = 
CC_INCLUDE = -I/usr/include/cxx
SYS_INCLUDE =

# Sometimes if we put an include path in the previous variable,
# the compile goes haywire.  But if we don't put the paths somewhere
# then makedepend can't find them.  This variable is kind of a dummy
# so that we can tell makedepend where to find things, but not have
# it affect the actual compile.
MAKE_DEPEND_INCLUDE =

# These include macros are for basic cubit versions. To set for
# parallel operations (MPI), create a COMM_INCLUDE_OPTION
# with the definition, -I$(MPI_INCLUDE_DIR)

EXTRA_INCLUDE = $(COMM_INCLUDE_OPTION)

#
# OptMS Package
#
# OPTMS_OPTION should be ON or OFF, indicating whether to link
# in the library or not.
#
#   **IMPORTANT!!!**
#  After changing the value of OPTMS_OPTION, you need to type
#  'make optms_files', or the affected files won't get recompiled!!!!
#
OPTMS_OPTION = OFF
OPTMS_ROOT = $(CUBITROOT)/Opt-MS
OPTMS_INCLUDE = -I$(OPTMS_ROOT)/include
FORTRAN_LIB = -lfor
OPTMS_APP_LIB = -lm
OPTMS_LINK = -L$(OPTMS_ROOT)/lib -lOptMS $(FORTRAN_LIB) $(OPTMS_APP_LIB)

#MESQUITE OPTIONS
MESQUITE_VER = 08c1
MESQUITE_DIR = $(CUBITROOT)/mesquite/mesquite_$(MESQUITE_VER)
MESQUITE_OPTION = ON
MESQUITE_INCLUDE = -I$(MESQUITE_DIR)/include
MESQUITE_LIB_DIR = $(MESQUITE_DIR)/lib/Dec
MESQUITE_LIB     = -lmesquite$(MESQUITE_VER)
MESQUITE_FLAGS = -DUSE_STD_INCLUDES


# camal variables
CAMAL_LIB_DIR	= $(SOURCE_DIR)/camal/lib/OSF1

# Simulog/INRIA tet sources; set to ON to link in INRIA tet mesher,
# otherwise set to OFF
SIMULOG_OPTION = ON
SIMULOG_LIB_DIR = $(CUBITROOT)/camal/camal2.0.2/lib/OSF1

# feature-based decomp'n sources; set to ON to link in feature-based decomp'n,
# otherwise set to OFF
FEATURE_OPTION = ON

# Medial sources; set to ON to link in the medial axis based work.
# otherwise set to OFF
MEDIAL_OPTION = OFF
MEDIAL_DEFINE =
MEDIAL_INCLUDES =
#MEDIAL_OPTION = ON
#MEDIAL_DEFINE = -DUSING_MEDIAL
#MEDIAL_INCLUDES = -Imedial -Imedial/medial_util -Imedial/medial2D \
#	-Imedial/medial3D

# verdict variables
CUBIT_VERDICT_VERSION = 112
VERDICT_DIR = $(CUBITROOT)/verdict/verdict1.1.2
VERDICT_LIB_DIR =  $(VERDICT_DIR)/lib
VERDICT_LIB = -lverdict$(CUBIT_VERDICT_VERSION)
VERDICT_INCLUDE =  -I${VERDICT_DIR}/include


# showviz settings
VTK_DIR = $(CUBITROOT)/VTK/VTK-4.2.2
VTK_LIB_DIR = $(VTK_DIR)/lib/vtk
VTK_INCLUDE = -I${VTK_DIR}/include/vtk -I./showviz/geom -I./showviz/mesh
VTK_LINK = -L$(VTK_LIB_DIR) -lvtkHybrid -lvtkIO -lvtkRendering -lvtkftgl \
           -lvtkfreetype -lvtkImaging -lvtkGraphics -lvtkFiltering -lvtkCommon\
            -lvtkexpat -lvtkjpeg -lvtkpng -lvtktiff -lvtkzlib -lpthread -lrt -lGL

SHOWVIZ_OPTION=OFF
HOOPS_OPTION=ON

# HOOPS variables - these variables are more system dependent than others -
# make sure to check these carefully 
#
# HOOPS needs additional system libraries linked in, which vary depending
# which system you're on
# HOOPS_LIB_DIR:
# where to find HOOPS libraries libhoops.a and libhoops.sl
CUBIT_HOOPS_VERSION = 620
EXTRA_HOOPS_LIB = 
HOOPS_DIR = $(CUBITROOT)/hoops/hoops-6.20
HOOPS_LIB_DIR =  $(HOOPS_DIR)/lib
#HOOPS_OPTION = ON
HOOPS_LIB = -lhoops$(CUBIT_HOOPS_VERSION)
#HOOPS_OPTION = OFF
#HOOPS_LIB =

# HOOPS_INCL_DIR:
# where to find HOOPS includes
#
HOOPS_INCLUDE =  -I${HOOPS_DIR}/include

# EXTRA_LIBS:
EXTRA_LIBS_LINK =  

####Define which solid modeling engine you will use, or all of them...
#
# ACIS 7.x version
#
SOLID_MODELER_DEFINES = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS
ACIS_VERSION = 700
ACIS_SYSTEM = osf1_64_so

##Minor version dependent stuff
#### Acis 7.0 Stuff           ###
CUBIT_ACIS_VERSION = 700
ACIS_DIR =  $(CUBITROOT)/acis/acis7.0.5


##Minor version INdependent stuff
ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)

ACIS_INCLUDE = -I$(ACIS_DIR) \
		-I$(ACIS_DIR)/kern \
		-I$(ACIS_DIR)/base \
		-I$(ACIS_DIR)/law \
		-I$(ACIS_DIR)/fct \
		-I$(ACIS_DIR)/ct \
		-I$(ACIS_DIR)/intr \
		-I$(ACIS_DIR)/swp \
		-I$(ACIS_DIR)/blnd \
		-I$(ACIS_DIR)/covr \
		-I$(ACIS_DIR)/bool \
		-I$(ACIS_DIR)/cstr \
		-I$(ACIS_DIR)/eulr \
                -I$(ACIS_DIR)/ofst \
		-I$(ACIS_DIR)/ga \
		-I$(ACIS_DIR)/heal \
		-I$(ACIS_DIR)/iges \
		-I$(ACIS_DIR)/step \
		-I$(ACIS_DIR)/lopt \
		-I$(ACIS_DIR)/rem \
		-I$(ACIS_DIR)/skin \
		-I$(ACIS_DIR)/lop \
		-I$(ACIS_DIR)/shl \
		-I$(ACIS_DIR)/oper \
		-I$(ACIS_DIR)/sbool \
		-I$(ACIS_DIR)/ct \
		-I$(ACIS_DIR)/mmgr 

ACIS_ARCH = osf1
ACIS_LINK       = -L${ACIS_LIB_DIR}\
		-lhealhusk \
		-lblend \
		-llop_husk \
		-lshl_husk \
		-lsweep \
		-lsbool \
		-lskin \
		-lcover \
		-loffset \
		-loperator \
		-lrem_husk \
		-lrbi_husk \
		-llopt_husk \
		-lboolean \
		-lskin \
		-lga_husk \
		-lrnd_husk \
		-lct_husk \
		-leuler \
		-lconstrct \
		-lfaceter \
		-lintersct \
		-lkernel \
		-llawutil \
		-lbaseutil 
#
# ACIS 6.x version
#
#SOLID_MODELER_DEFINES = -DACIS_3D -DACIS_HEALER -DACIS_LOCAL_OPS \
#		 -DACIS_IGES_TRANSLATOR -DMMGR_FREELIST

##Minor version dependent stuff
#### Acis 6.2 Stuff           ###
#CUBIT_ACIS_VERSION = 602
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.2

#### Acis 6.1 Stuff           ###
#CUBIT_ACIS_VERSION = 601
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.1

### Acis 6.0 Stuff           ###
#CUBIT_ACIS_VERSION = 600
#ACIS_DIR =  $(CUBITROOT)/acis/acis6.0


##Minor version INdependent stuff
#ACIS_LIB_DIR =  $(ACIS_DIR)/lib/$(ACIS_SYSTEM)

#ACIS_INCLUDE = -I$(ACIS_DIR) \
#		-I$(ACIS_DIR)/kern \
#		-I$(ACIS_DIR)/base \
#		-I$(ACIS_DIR)/law \
#		-I$(ACIS_DIR)/fct \
#		-I$(ACIS_DIR)/intr \
#		-I$(ACIS_DIR)/swp \
#		-I$(ACIS_DIR)/blnd \
#		-I$(ACIS_DIR)/covr \
#		-I$(ACIS_DIR)/bool \
#		-I$(ACIS_DIR)/cstr \
#		-I$(ACIS_DIR)/eulr \
#		-I$(ACIS_DIR)/ofst \
#		-I$(ACIS_DIR)/ga \
#		-I$(ACIS_DIR)/heal \
#		-I$(ACIS_DIR)/iges \
#		-I$(ACIS_DIR)/step \
#		-I$(ACIS_DIR)/lopt \
#		-I$(ACIS_DIR)/rem \
#		-I$(ACIS_DIR)/skin \
#		-I$(ACIS_DIR)/lop \
#		-I$(ACIS_DIR)/oper \
#		-I$(ACIS_DIR)/mmgr

#ACIS_ARCH = osf1
#ACIS_LINK       = -L${ACIS_LIB_DIR}\
#		-lhealhusk \
#		-lblend \
#		-ligeshusk \
#		-llop_husk \
#		-lsweep \
#		-lsbool \
#		-lskin \
#		-lcover \
#		-loffset \
#		-ltransutl \
#		-loperator \
#		-lrem_husk \
#		-lrbi_husk \
#		-llopt_husk \
#		-lboolean \
#		-lskin \
#		-lga_husk \
#		-lrnd_husk \
#		-lct_husk \
#		-leuler \
#		-lconstrct \
#		-lfaceter \
#		-lintersct \
#		-lkernel \
#		-lspline \
#		-lkernel \
#		-llawutil \
#		-lbaseutil 

##End of ACIS version-specific stuff
#
ACIS_DEFINES =  -D$(ACIS_ARCH) -D$(ACIS_SYSTEM) -D__STDC__\
                -DACIS$(CUBIT_ACIS_VERSION) -DACIS_VER=$(ACIS_VERSION)\
                -DCUBIT_ACIS_VERSION=$(CUBIT_ACIS_VERSION) -DPOINT_VERSION=0 \
                -DAGVER=105 -DANSI -DNO_DTORS

# Template Flag.  This has become necessary because of CGM
# If compiling cgm, use the next line, otherwise leave it commented out
#TEMPLATE_FLAG = -tlocal
TEMPLATE_FLAG = 

# Operating system version, obtained by 'uname -r'
MY_OS_VERSION=V5.0

# Template files that need to be compiled differently depending on the 
# platform.  The Linux platform has to #include the .cpp file into the .hpp
# file, and so has to have it taken out of the makefile.  So, we declare the
# *_TEMPLATES variable and set it or not, depending on the platform.
LIST_TEMPLATES = DLIList.cpp \
		RTree.cpp \
		RTreeNode.cpp
FEATURE_TEMPLATES = FeatureTable.cpp
GEOM_TEMPLATES = BoundaryConstrainTool.cpp

# Debug Flags, before CUBIT 2.0, this was in the makefile.  It was moved
# here to be less tempting for the makefile with a different option
# to be checked in.

# If you want to optimise the code you should use a -O here instead of
# the -g
#DEBUG_FLAG = -O
DEBUG_FLAG = -gall \
	-msg_disable ptroutbasobj \
	-msg_disable idxoutrange \
	-msg_disable nosimpint \
	-msg_disable codeunreachable \
	-msg_disable labelnotreach \
	-msg_disable codcauunr \
	-msg_disable nullref \
	-msg_disable initnotreach \
	-msg_disable uninit2 \
	-x cxx

SMD_DEFINES = -DSMD_HANDLE_VALUE_TYPE="unsigned long"

# These compile flags are for basic cubit versions. To set for no graphics
# or parallel operations (MPI), add the -DNO_GRAPHICS and
# -DMPI_COMMUNICATIONS_ENABLED
# flags to GRAPHICS_OPTION and COMM_OPTION respectively

MACH_CFLAGS = $(ACIS_DEFINES) -DDA \
              $(GRAPHICS_OPTION) $(COMM_OPTION) \
              -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION)

# if you are doing graph drawing stuff (whisker weaving), then 
# you need to uncomment the next line and comment the other
# MACH_CXXFLAGS one.

#MACH_CXXFLAGS = $(ACIS_DEFINES) -DHP -DANSI -DXTFUNCPROTO -z \
#                -DGRAPH_DRAWING $(SOLID_MODELER_DEFINES) \
#		-DOS_VERSION=$(MY_OS_VERSION) \
#		$(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG) # -G
MACH_CXXFLAGS = $(SMD_DEFINES) $(ACIS_DEFINES) -DCUBIT -DDA \
                -std strict_ansi -DANSI -DXTFUNCPROTO \
		-DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION) -ieee \
		$(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) -DOS_VERSION=$(MY_OS_VERSION) \
                $(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG) # -G

# at least all -D and -I options from MACH_CXXFLAGS go here for makedepend
MACH_DEPEND_FLAGS = $(ACIS_DEFINES) -DDA -DANSI -DXTFUNCPROTO \
                    -DCUBIT_HOOPS_VERSION=$(CUBIT_HOOPS_VERSION) \
                    $(SOLID_MODELER_DEFINES) $(MEDIAL_DEFINE) -DOS_VERSION=$(MY_OS_VERSION) \
                    $(GRAPHICS_OPTION) $(COMM_OPTION) $(TEMPLATE_FLAG)


#For static use the next line, although GL won't be static
#MACH_LIBS_LINK =   -L/usr/lib -hidden -lcxx -non_hidden -lc -lm -lfor -lFutil \
#  -so_archive -L/usr/shlib -no_so -lSM -lICE -ldnet_stub
#For non-static use this one.
MACH_LIBS_LINK = -lc -lPW -lm -lfor -L/usr/shlib

#if you want static cubit, uncomment this line (with the -no_so)
#MACH_LFLAGS = $(TEMPLATE_FLAG) -ptr cxx_repository \
#			-ptr geom/ACIS/cxx_repository \
#			-ptr geom/virtual/cxx_repository \
#                       -ptr geom/facet/cxx_repository \
#			-ptr geom/cxx_repository  \
#                        -ptr util/cxx_repository \
#                        -ptr df/cxx_repository \
#                        -ptr camal/src/trimesh/cxx_repository -no_so
#for non-static, use this one
MACH_LFLAGS = $(TEMPLATE_FLAG) -ptr cxx_repository \
			-ptr geom/ACIS/cxx_repository \
			-ptr geom/virtual/cxx_repository \
                        -ptr geom/facet/cxx_repository \
                        -ptr geom/facetbool/cxx_repository \
                        -ptr geom/Cholla/cxx_repository \
			-ptr geom/cxx_repository \
			-ptr util/cxx_repository \
			-ptr mdb/cxx_repository \
			-ptr df/cxx_repository \
			-ptr bc/cxx_repository \
			-ptr cbt_mesquite/cxx_repository \
			-ptr camal/src/trimesh/cxx_repository \
			-ptr camal/src/shared/cxx_repository

# MPI Communication stuff - just comment out if not making parallel version
#MPI_ARCH        = solaris
#MPI_COMM        = ch_p4
#MPI_INSTALL_DIR = /usr/netpub/ftp.mcs.anl.gov/pub/mpi/mpi-1.0.11-install
#MPI_LIB_PATH    = -L$(MPI_INSTALL_DIR)/lib/$(MPI_ARCH)/$(MPI_COMM)
#MPI_LIB_LIST    = -lmpi -lsocket -lnsl -lthread

# Some controls on echoing of compile commands; for verbose output, comment
# out the following two definitions
PREFIX = @
LINK_PREFIX = ${PREFIX}
ARCHIVE_PREFIX = ${PREFIX}
ECHO_COMMAND = @ echo "Compiling: $<"

## You can change this to filter the output of the compilation
#
#ACIS_GREP_FILTER = /usr/bin/egrep -v '(([.]hxx)|ATTRIB).*(::fixup_copy|::copy_common)'
#ACIS_FILTER = 2> compile_errors.txt ; \
#	${ACIS_GREP_FILTER} compile_errors.txt ; \
#	/bin/rm compile_errors.txt
ACIS_FILTER = 

# Some compiler definitions - check your environment to make sure the correct
# compilers are being referenced
#
# CC:
CC = cc
CXX = cxx
LINKER = ${CXX}
ARCHIVER = ar -ru

# MAKEDEPEND:
MAKEDEPEND = /usr/local/eng_sci/cubit/bin/makedepend -f-

CUBIT_HELP_DIR = $(SOURCE_DIR)

MAKE = gmake

TEMPLATE_DIR = cxx_repository


